openapi: 3.0.0
info:
  title: FakeStoreAPI
  version: 1.0.0
  description: |
    FakeStoreAPI is a RESTful API that provides a set of dummy data for products, carts, and users in JSON format.
servers:
  - url: https://fakestoreapi.com

security:
  - BearerAuth: []

paths:
  /products:
    get:
      summary: Get all products
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Limit the number of products returned
        - in: query
          name: sort
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort the results in ascending or descending order
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Add a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: The created product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /products/{id}:
    get:
      summary: Get a single product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The product ID
      responses:
        '200':
          description: A single product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      summary: Update a product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The product ID to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: The updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    patch:
      summary: Partially update a product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The product ID to partially update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPartialInput'
      responses:
        '200':
          description: The partially updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      summary: Delete a product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The product ID to delete
      responses:
        '200':
          description: The deleted product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /products/categories:
    get:
      summary: Get all product categories
      responses:
        '200':
          description: A list of product categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /products/category/{category}:
    get:
      summary: Get products in a specific category
      parameters:
        - in: path
          name: category
          required: true
          schema:
            type: string
          description: The category name
        - in: query
          name: limit
          schema:
            type: integer
          description: Limit the number of products returned
        - in: query
          name: sort
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort the results in ascending or descending order
      responses:
        '200':
          description: A list of products in the specified category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /carts:
    get:
      summary: Get all carts
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Limit the number of carts returned
        - in: query
          name: sort
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort the results in ascending or descending order
        - in: query
          name: startdate
          schema:
            type: string
            format: date
          description: Start date for filtering carts
        - in: query
          name: enddate
          schema:
            type: string
            format: date
          description: End date for filtering carts
      responses:
        '200':
          description: A list of carts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
    post:
      summary: Add a new cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartInput'
      responses:
        '200':
          description: The created cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
  /carts/{id}:
    get:
      summary: Get a single cart
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The cart ID
      responses:
        '200':
          description: A single cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
    put:
      summary: Update a cart
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The cart ID to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartInput'
      responses:
        '200':
          description: The updated cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
    patch:
      summary: Partially update a cart
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The cart ID to partially update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartPartialInput'
      responses:
        '200':
          description: The partially updated cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
    delete:
      summary: Delete a cart
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The cart ID to delete
      responses:
        '200':
          description: The deleted cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
  /carts/user/{userId}:
    get:
      summary: Get carts for a specific user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: The user ID
        - in: query
          name: startdate
          schema:
            type: string
            format: date
          description: Start date for filtering carts
        - in: query
          name: enddate
          schema:
            type: string
            format: date
          description: End date for filtering carts
      responses:
        '200':
          description: A list of carts for the specified user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'

  /users:
    get:
      summary: Get all users
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Limit the number of users returned
        - in: query
          name: sort
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort the results in ascending or descending order
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Add a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      summary: Get a single user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The user ID
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The user ID to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      summary: Partially update a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The user ID to partially update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPartialInput'
      responses:
        '200':
          description: The partially updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The user ID to delete
      responses:
        '200':
          description: The deleted user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
      security: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        price:
          type: number
          format: float
        category:
          type: string
        description:
          type: string
        image:
          type: string
      required:
        - id
        - title
        - price
        - category
        - description
        - image
    ProductInput:
      type: object
      properties:
        title:
          type: string
        price:
          type: number
          format: float
        category:
          type: string
        description:
          type: string
        image:
          type: string
      required:
        - title
        - price
        - category
        - description
        - image
    ProductPartialInput:
      type: object
      properties:
        title:
          type: string
        price:
          type: number
          format: float
        category:
          type: string
        description:
          type: string
        image:
          type: string
    Cart:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        date:
          type: string
          format: date
        products:
          type: array
          items:
            $ref: '#/components/schemas/CartProduct'
      required:
        - id
        - userId
        - date
        - products
    CartInput:
      type: object
      properties:
        userId:
          type: integer
        date:
          type: string
          format: date
        products:
          type: array
          items:
            $ref: '#/components/schemas/CartProduct'
      required:
        - userId
        - date
        - products
    CartPartialInput:
      type: object
      properties:
        userId:
          type: integer
        date:
          type: string
          format: date
        products:
          type: array
          items:
            $ref: '#/components/schemas/CartProduct'
    CartProduct:
      type: object
      properties:
        productId:
          type: integer
        quantity:
          type: integer
      required:
        - productId
        - quantity
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        username:
          type: string
        password:
          type: string
        name:
          $ref: '#/components/schemas/UserName'
        address:
          $ref: '#/components/schemas/UserAddress'
        phone:
          type: string
      required:
        - id
        - email
        - username
        - password
        - name
        - address
        - phone
    UserInput:
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
        password:
          type: string
        name:
          $ref: '#/components/schemas/UserName'
        address:
          $ref: '#/components/schemas/UserAddress'
        phone:
          type: string
      required:
        - email
        - username
        - password
        - name
        - address
        - phone
    UserPartialInput:
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
        password:
          type: string
        name:
          $ref: '#/components/schemas/UserName'
        address:
          $ref: '#/components/schemas/UserAddress'
        phone:
          type: string
    UserName:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
      required:
        - firstname
        - lastname
    UserAddress:
      type: object
      properties:
        city:
          type: string
        street:
          type: string
        number:
          type: integer
        zipcode:
          type: string
        geolocation:
          $ref: '#/components/schemas/GeoLocation'
      required:
        - city
        - street
        - number
        - zipcode
        - geolocation
    GeoLocation:
      type: object
      properties:
        lat:
          type: string
        long:
          type: string
      required:
        - lat
        - long
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
      required:
        - token
